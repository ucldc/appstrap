#!/usr/bin/env bash

if [[ -n "$DEBUG" ]]; then 
  set -x
fi

set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # http://stackoverflow.com/questions/59895
cd $DIR

. stack_run.sh  # gives us `stack_run_batch`
export LD_LIBRARY_PATH="${HOME}/pkg/lib"

. $DIR/../setenv.sh

../cdl/get_java

# install pkgsrc packages
export PKG_JVM_DEFAULT=sun-jdk7
echo "================================PMAKE solr.pkgsrc.txt"
ACCEPTABLE_LICENSES=oracle-binary-code-license stack_run_batch "../pmake" solr.pkgsrc.txt
if [[ ! -e ${HOME}/pkg/bin/python ]]; then
    ln -s ${HOME}/pkg/bin/python2.7 ${HOME}/pkg/bin/python
fi

echo "--------------------------------"
which python
echo "--------------------------------"

pip install lxml
../jpache --prefix=${HOME}/java -f
../java/grab-solr.sh

. monit_binary

# okay, now we should have a good stack set up, let's install and configure the app!
cd $DIR/../ansible
pwd
if [[ ! -d bin ]]; then
  ./init.sh
fi
set +u
. bin/activate
pip install -r requirements-solr.txt --use-mirrors
set -u
ansible-playbook -i host_inventory solr-playbook.yml
